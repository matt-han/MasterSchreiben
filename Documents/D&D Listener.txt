if (notification.getNotifier() instanceof TreeItem){ // something changed in the treeItem
	if (notification.getNewValue() instanceof RequirementTag){	// requirement linkage had been added
		string reqText = getRequirementText();
		if (searchForParameters(reqText) == true)
			doorsModul.getParametersValue(param);
	
	}
	else if	(notification.getOldValue() instanceof RequirementTag){ // requirement linkage  had  been removed	
		delete 
	
	
	}
	
	
		
} else if (notification.getNotifier() instanceof StringToStringListMapEntryImpl){ // requirement value changed 
	
}




package com.berner_mattner.testona.requirements.gui.viewparts.req class TestonaGridRequirementsTagModel					
FÃœR BEISPIELE Type Hierarchy von MyResourceSetListerner


private final ResourceSetListener resourceSetListener;
this.resourceSetListener = new MyResourceSetListener();
add:    editor.getEditingDomain().addResourceSetListener(this.resourceSetListener);
remove: editor.getEditingDomain().removeResourceSetListener(this.resourceSetListener);


NACH REQ AUFPASSEN
	for (Notification notification : event.getNotifications())
	{
		if (notification.getNotifier() instanceof RequirementsListTag // requirement had been added
			|| notification.getNotifier() instanceof RequirementsViewsTag // requirements order had been changed
			|| notification.getNotifier() instanceof StringToStringListMapEntryImpl)// requirement value changed
		{
			update |= UPDATE_REQUIREMENTS;
			break;
		}
		notification.getNewValue() instanceof RequirementTag // requirement linkage had been added
		notification.getOldValue() instanceof RequirementTag // requirement linkage  had  been removed
		notification.getNotifier() instanceof RequirementTag // requirement inkage had been added  or  removed
		notification.getNotifier() instanceof StringToIndieRequirementMapEntryImpl // requirement value changed
	}
	
	
private class MyResourceSetListener implements ResourceSetListener
{
@Override
		public void resourceSetChanged(ResourceSetChangeEvent event) {
			for (Notification notification : event.getNotifications()) {
				if (notification.getNotifier() instanceof TagManagerTag
						|| notification.getNewValue() instanceof Icon
						|| notification.getOldValue() instanceof Icon) {
					TagManagerDialog.this.updateTagsList();
					return;
				}
			}
		}

@Override
		public void resourceSetChanged(ResourceSetChangeEvent event) {
			for (Notification notification : event.getNotifications()) {
				if (notification.getNotifier() instanceof RuleViolations) {
					RuleViolations rv;
					rv = (RuleViolations) notification.getNotifier();
					rules = (java.util.List<Object>) rv.getViolatedRules();
					update();
					break;
				}
			}
		}
	
	@Override
	public NotificationFilter getFilter() {
		return null;
	}

	@Override
	public boolean isAggregatePrecommitListener() {
		return false;
	}

	@Override
	public boolean isPostcommitOnly() {
		return false;
	}

	@Override
	public boolean isPrecommitOnly() {
		return false;
	}

	@Override
	public Command transactionAboutToCommit(ResourceSetChangeEvent event)
			throws RollbackException {
		return null;
	}
}